
misc todo:
* +we can use less perlin octaves for distant textures! LOD!
* bump mapping.
* make perlin noise generator(tileable: http://gamedev.stackexchange.com/a/23705)
* make bmp loader.
* make prettier text.



http://freespace.virgin.net/hugo.elias/models/m_perlin.htm
https://graphics.ethz.ch/teaching/imsynth12/competition//2nd%20Place..%20Adrian%20Blumer/report.html
http://www.sci.utah.edu/~leenak/IndStudy_reportfall/Perlin%20Noise%20on%20GPU.html
https://skybase.wordpress.com/2012/01/26/how-to-creating-super-simple-procedural-wood-textures-in-filter-forge/
http://amber.rc.arizona.edu/darktree/cellular.html

animated perlin:

This was produced by viewing a slice of 3D noise. For animation, the viewing area moves in two dimensions (z and y). One dimension makes the fire flicker, the other makes it look like it's rising. A simple gradient was applied to the resulting noise to fade away towards the top.



perlin article:
http://http.developer.nvidia.com/GPUGems/gpugems_ch05.html

http://theorangeduck.com/page/avoiding-shader-conditionals



has a very clean implementation of 3d noise: use this base!
http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter26.html
also use
noise1234.c as base


GUI design.


http://drilian.com/2007/10/27/jpeg-buoys-amidst-a-sea-of-text/
http://drilian.com/wp-content/uploads/2010/01/SimpleBrick.jpg


float noise2( float2 p )
{




int ix0, iy0, ix1, iy1;
    float fx0, fy0, fx1, fy1;
    float s, t, nx0, nx1, n0, n1;



    ix0 = FASTFLOOR( x ); // Integer part of x
    iy0 = FASTFLOOR( y ); // Integer part of y

    fx0 = x - ix0;        // Fractional part of x
    fy0 = y - iy0;        // Fractional part of y
    fx1 = fx0 - 1.0f;
    fy1 = fy0 - 1.0f;

    ix1 = (ix0 + 1) & 0xff;  // Wrap to 0..255
    iy1 = (iy0 + 1) & 0xff;
    ix0 = ix0 & 0xff;
    iy0 = iy0 & 0xff;

    t = FADE( fy0 );
    s = FADE( fx0 );

    nx0 = grad2(perm[ix0 + perm[iy0]/*A*/ ]/*C*/ , fx0, fy0);
    nx1 = grad2(perm[ix0 + perm[iy1]/*B*/ ]/*D*/, fx0, fy1);
    n0 = LERP( t, nx0, nx1 );

    nx0 = grad2(perm[ix1 + perm[iy0]/*A*/]/*E*/, fx1, fy0);
    nx1 = grad2(perm[ix1 + perm[iy1]/*B*/]/*F*/, fx1, fy1);
    n1 = LERP(t, nx0, nx1);

    return 0.507f * ( LERP( s, n0, n1 ) );
}


vec3 fade(vec3 t)
{
return t * t * t * (t * (t * 6 - 15) + 10);
}

float perm(float x)
{
// make sure the texture is wrapping!
	return tex1D(permSampler, x);
}

static int permutation[] = { 151,160,137,91,90,15,
131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
};

float inoise(float2 p)

{
 // the integerg part.
  veec3 P = mod(floor(p), 256.0);

// the fractional part.
  p -= floor(p);

// the interpolant.
  vec2 f = fade(p);

  float A = perm(P.y);
  float B = perm(P.y+1);

  float C = perm(A + P.x);
  float D = perm(B + P.x);

  float E = perm(A + P.x+1);
  float F = perm(B + P.x+1);

  // AND ADD BLENDED RESULTS FROM 8 CORNERS OF CUBE

  return lerp(f.x, // should not x be here?
    lerp(f.y, grad2(C, p + float(0,0)), grad2(D, p + float2(0,-1) )),
    lerp(f.y, grad2(E, p + float(-1,0)), grad2(F, p + float(-1,-1)) ));
}

static float3 g[] = {
    1,1,
    -1,1,
    1,-1,
    -1,-1,
    1,0,
    -1,0,
    0,1,
    0,-1
};
