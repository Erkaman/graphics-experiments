
Todo:


* implement precomputed radiance transfer for prebaked global illuminatin
* shadow mapping.
* create an efficient terrain system.
* water rendering
* shadows.
* Deferred rendering, multiple materials:
* Make better unit testing framework.


links:

glsl worley and perlin
http://drilian.com/2007/10/27/jpeg-buoys-amidst-a-sea-of-text/


valve graphics
http://www.valvesoftware.com/publications/2006/SIGGRAPH06_Course_ShadingInValvesSourceEngine.pdf


spatial data structures.
http://gamedev.stackexchange.com/questions/5493/whats-the-state-of-the-art-in-space-partitioning-for-games



* detail textures to improve the grass texture.
http://blogs.msdn.com/b/shawnhar/archive/2008/11/03/detail-textures.aspx
https://developer.valvesoftware.com/wiki/$detail




* deferred rendering notes:

http://www.cse.chalmers.se/~uffe/bachelor/kandidatarbetestartpaket/DATx02-14-81.pdf
page 16 has a very nice formula!

emissive component, light calculation.

http://http.developer.nvidia.com/GPUGems2/gpugems2_chapter09.html

http://gamedev.stackexchange.com/questions/19575/is-there-a-way-to-use-an-arbitrary-number-of-lights-in-a-fragment-shader


to handle materials with multiple brdfs, store material id in buffer.


We don't need to store the position in a texture:

"The position is usually not stored. It is instead reconstituted in
the second pass by math that's too complex to get into here. Suffice
it to say, we use the depth buffer and the screen-space fragment
position as the input to figure out the camera-space position of the
point on a surface."

we want to render to four render targets. in total, we get 16 floating
point numbers to play around with!


* doom 3 map format:

http://doomwiki.org/wiki/Thing

doom3 map format:
http://web.archive.org/web/20080220062502/http://www.gamers.org/dEngine/quake/QDP/qmapspec.html

https://developer.valvesoftware.com/wiki/MAP_file_format
