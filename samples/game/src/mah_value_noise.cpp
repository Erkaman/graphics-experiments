#include "mah_value_noise.hpp"
#include "util.hpp"
#include "log.hpp"
#include "common.hpp"

#include "math/vector2f.hpp"

#include <math.h>

static inline Vector2f Fade(const float px, const float py) {
    return Vector2f(
	px * px * px * (px * (px * 6 - 15) + 10),
	py * py * py * (py * (py * 6 - 15) + 10));
}

static inline float Lerp(float x, float y, float a) {
    return x*(1-a)+y*a;
}

static inline int Floor(float x) {
    return x>=0 ? (int)x : (int)x-1;
}


ValueNoise::ValueNoise(unsigned long long seed):
    m_perm {
    115,295,108,342,360,17,292,508,199,214,272,149,224,318,171,165,350,269,182,237,133,190,138,15,489,283,436,472,433,296,6,364,339,256,320,70,40,454,478,290,448,194,54,197,38,463,281,203,288,294,309,101,102,346,279,297,223,322,274,498,226,11,337,507,484,345,354,432,310,480,470,323,391,413,468,329,55,80,445,243,460,132,167,471,249,225,383,312,344,180,240,333,409,136,146,20,81,168,366,227,35,408,425,473,475,174,505,253,245,386,352,481,42,19,216,151,163,21,213,169,228,44,215,332,262,34,335,410,270,145,142,112,230,362,196,486,374,302,116,511,187,152,397,36,45,233,464,365,175,73,280,100,143,155,393,482,67,419,400,325,242,150,96,61,25,82,188,246,244,455,97,291,4,411,416,89,271,47,104,217,338,137,129,13,406,494,189,430,211,234,316,99,449,170,358,18,195,396,198,93,232,341,208,105,2,140,166,239,487,75,375,84,110,12,268,276,59,417,372,117,502,428,29,144,178,114,259,493,501,330,186,193,265,476,43,305,499,285,94,348,264,422,206,385,39,398,33,14,510,412,492,218,303,58,48,443,1,51,327,161,139,27,331,231,207,191,462,491,10,456,429,185,23,49,122,387,326,98,0,407,503,402,128,255,378,212,235,63,465,282,181,286,299,64,50,446,88,106,461,293,418,41,392,257,384,435,7,328,275,363,415,134,141,485,263,254,147,451,336,353,442,334,184,251,164,497,160,311,300,192,57,126,66,403,267,313,424,376,79,388,109,71,496,24,95,368,395,222,148,78,111,127,277,28,107,431,457,351,506,399,495,453,308,367,357,500,315,153,76,52,347,92,389,156,441,469,258,77,440,135,261,172,53,118,30,119,404,247,123,477,343,488,370,377,83,427,241,8,157,62,65,68,380,204,434,447,179,201,439,467,394,90,321,229,32,319,438,205,162,113,125,287,219,359,86,85,421,317,210,22,355,479,504,154,307,250,158,183,236,444,390,220,177,324,26,349,379,304,474,340,56,483,159,69,284,452,74,130,91,3,289,356,176,450,369,31,252,9,458,260,5,509,72,423,373,301,37,103,248,466,87,266,120,298,121,173,405,46,221,361,306,200,238,382,414,124,420,371,16,381,401,314,202,278,426,490,437,273,131,459,60,209
},
m_rand {
    -0.385380889932 ,
0.736498113385 , -0.379025680625 , 0.109366600432 , 0.580341754874 , -0.438541449166 , -0.996817385377 , 0.812618155576 , 0.15690564927 , 0.4886291517 , -0.236108290513 , -0.427711874947 , 0.797007962094 , -0.703197055833 , 0.820461118898 , -0.912982838982 , -0.0496025266952 , -0.664413997939 , -0.87472676061 , -0.642650257482 , 0.160698998808 ,
0.665175446978 , -0.947212660933 , 0.427500417491 , 0.864230458548 , 0.320260904057 , -0.442848233385 , 0.890601324786 , 0.972412452255 , -0.329959124291 , 0.605081819352 , -0.107884793382 , 0.557727031742 , -0.770114036579 , 0.95389267959 , 0.953701644808 , -0.454768465237 , 0.693861392032 , 0.349741834019 , 0.356185165282 , -0.890719724881 ,
-0.196544448713 , -0.535542576655 , 0.90782282098 , 0.071253775929 , 0.558738836163 , -0.671230854525 , 0.711524987286 , 0.0149305002585 , 0.652717442355 , -0.0399736918944 , -0.0847549358595 , 0.422790968061 , 0.863872363624 , 0.775135679993 , -0.644001100708 , 0.00717500417381 , 0.865461597231 , 0.102014705288 , -0.581258117996 , -0.746372984107 ,
0.138362368613 , 0.209955141743 , -0.701081701069 , -0.339657273218 , -0.306552954221 , 0.173373808545 , -0.283244118303 , 0.379705221733 , 0.785128056172 , 0.24510967883 , 0.576603865995 , 0.378272956211 , -0.700966483991 , -0.64316363781 , -0.226028079819 , 0.670594077389 , -0.389175994736 , 0.899810361098 , 0.133021857073 , -0.761809084728 ,
-0.229515395355 , 0.376207459593 , -0.754169258455 , 0.983992385123 , 0.255870979451 , 0.453670951056 , 0.67869270073 , -0.386327250757 , 0.932074253291 , -0.54606281394 , 0.654922308608 , -0.22425397064 , -0.864453455181 , -0.129794652542 , 0.0937681898187 , 0.0763488150514 , 0.94820425495 , 0.764232755131 , -0.728533439931 , -0.946642968241 ,
-0.699978739221 , 0.836188125904 , 0.765891278019 , -0.962398784235 , -0.365293755682 , -0.00993075992726 , 0.229904218487 , 0.920645904499 , -0.346204991072 , -0.276984514739 , -0.941503263202 , -0.319785957089 , 0.143088909164 , -0.932341613668 , 0.687787393086 , 0.1491179234 , -0.405976623441 , 0.892400755933 , 0.359312819329 , -0.874011698193 ,
-0.42995072533 , 0.788880229669 , -0.709440780658 , -0.246764625637 , 0.224883801437 , 0.573204394816 , 0.745796550489 , -0.0581749981576 , 0.746559107085 , 0.189215719391 , 0.874245462276 , 0.650592140578 , -0.316458839767 , -0.13272373149 , 0.426280256455 , 0.49388447864 , -0.630241937638 , 0.947288224316 , -0.0523015301713 , -0.00586512185968 ,
0.0777562613694 , -0.751356454525 , 0.0131480727618 , -0.803028855553 , 0.0924385267893 , -0.600202046739 , 0.65263336196 , 0.269155285084 , 0.340922073979 , -0.439411769678 , 0.233892251498 , -0.688838775738 , 0.459118112644 , 0.685823779849 , 0.583703132443 , 0.952890033808 , -0.927997676207 , 0.755678726208 , 0.417086558579 , -0.284502956596 ,
-0.648728974522 , -0.967242011582 , -0.723453078708 , 0.178948944432 , 0.738920470198 , 0.237318268513 , -0.592310105295 , 0.444346898217 , -0.372580338719 , -0.286329787241 , -0.101712093983 , 0.523761922968 , 0.986608380357 , -0.583970522094 , -0.353105697113 , -0.170817027952 , -0.746070268155 , -0.183737060035 , 0.0438958664221 , 0.970038738575 ,
0.779231849922 , -0.086185458838 , -0.756657962194 , 0.387706535163 , -0.543690388048 , -0.561983940928 , 0.423476300244 , 0.111829917045 , -0.086526387725 , 0.232629738432 , -0.216529372293 , -0.0630643431337 , -0.311774280163 , -0.115734239283 , -0.825651843484 , -0.173457903234 , 0.94057054195 , -0.286023880296 , -0.391102461325 , 0.497101845248 ,
0.647665869922 , -0.177709357768 , -0.431888279984 , 0.318134860825 , 0.483176446389 , -0.308486328258 , 0.722515432183 , 0.359376080939 , 0.802369363548 , 0.360636631128 , -0.230252271499 , 0.855334922004 , 0.730982766479 , 0.0819812137949 , -0.502935318573 , -0.261559947174 , 0.215126318042 , -0.645397474345 , -0.553831449813 , 0.334007534964 ,
0.762626324451 , 0.0996009620825 , -0.652043738317 , 0.568472267411 , 0.376242468025 , -0.658991523534 , -0.463950553583 , -0.78178063277 , 0.769200344935 , -0.948924357772 , -0.742350297718 , -0.247683934796 , -0.524596062391 , -0.310434983498 , 0.0263402384122 , -0.919129070624 , 0.681881013766 , -0.589567904846 , -0.76325923209 , 0.711593436601 ,
0.524347641552 , 0.674153534246 , 0.619366093932 , -0.863702426904 , -0.229016281993 , 0.547688877796 , 0.846060350918 , -0.0377170742467 , -0.818263686249 , 0.0910067428811 , -0.254797884056 , 0.0335416749949 , -0.371939385769 , 0.295818118903 , -0.471435895522 , -0.539349249183 , 0.106105245347 , -0.208108666616 , -0.799564660273 , 0.22941299108 ,
0.317488027621 , 0.521712836355 , 0.604244323774 , -0.994937921514 , 0.8025767386 , -0.899614367104 , -0.243360248424 , -0.330524256254 , 0.0615463558567 , 0.603027322853 , 0.255092320047 , 0.939046968023 , -0.267174664984 , -0.855922737937 , -0.762716775688 , -0.665765250719 , 0.625953691329 , 0.608616810855 , -0.526310944628 , 0.0201665780114 ,
-0.49813341126 , -0.708294346582 , -0.611806607439 , -0.217176382926 , 0.377101085792 , 0.53190868169 , -0.47292862349 , 0.779036391051 , 0.234198392659 , -0.162938040702 , 0.387990939783 , 0.343322357957 , 0.709294002089 , 0.0717253607665 , -0.880449684285 , -0.383850803336 , -0.0756477149207 , -0.626674612711 , 0.927660025234 , -0.0733604560211 ,
0.361574102797 , 0.987827584593 , 0.862785782829 , 0.557030221479 , 0.916407272401 , -0.318085786401 , -0.772603120569 , -0.754008554179 , 0.725040034478 , -0.281154378407 , -0.95082102323 , -0.00530350502927 , -0.968277047584 , 0.294857395744 , 0.0895306523142 , 0.120417115956 , 0.415149944163 , 0.237690363698 , 0.55283017264 , 0.725591206055 ,
0.0818522019055 , 0.923186250271 , -0.476868240333 , -0.0813288011732 , -0.553225146175 , 0.340162672051 , -0.0190568644958 , -0.853356434031 , -0.647427964376 , -0.444345434006 , -0.652856246006 , -0.666683397021 , -0.58794862341 , -0.266180488796 , 0.570195275226 , -0.263162410573 , -0.965238087502 , 0.0863571724211 , -0.208213393185 , -0.802851211188 ,
0.722143592014 , -0.985956143834 , 0.78735941382 , -0.852611696892 , 0.727742011911 , 0.878219807278 , -0.0146853216512 , -0.251774933787 , 0.765873910227 , 0.114081226958 , -0.128606096022 , -0.868845365283 , -0.638307575874 , 0.585577924809 , 0.387927271373 , 0.430031909596 , 0.191339064278 , 0.814131677724 , -0.0327352158108 , -0.116347569878 ,
0.287268984728 , -0.27616422884 , 0.806809680084 , -0.630665677137 , 0.394587460893 , 0.914395569152 , 0.469907150236 , 0.313350807859 , 0.136469093923 , -0.86606756761 , 0.750762991339 , 0.710094942796 , 0.66460244913 , -0.587862129376 , -0.282515030611 , 0.637434475855 , 0.893020516839 , 0.304336452505 , -0.211123945594 , 0.753685936354 ,
0.681023676871 , -0.293700978613 , -0.253141477171 , -0.881624020987 , -0.843653643486 , 0.639762299824 , -0.624304263784 , -0.893392208066 , -0.138074686064 , -0.527945454611 , 0.582638276289 , 0.750610195045 , 0.91882120529 , 0.91654730523 , 0.404822100112 , -0.754295487757 , -0.021794758325 , 0.17703654933 , 0.786910709244 , 0.229075970307 ,
0.136244508481 , -0.149906631716 , 0.556438005879 , -0.678076785096 , -0.923017369266 , -0.13057293914 , -0.0413757636589 , -0.771706241576 , -0.166475421712 , 0.0489289385638 , 0.47531728368 , -0.352916560129 , 0.290062998679 , -0.391212418448 , 0.745558068794 , 0.843520441079 , -0.234745317814 , -0.625793282333 , 0.308640552508 , 0.455001308369 ,
-0.329837852475 , -0.029553825096 , 0.29879881793 , -0.982875601649 , 0.548322039927 , 0.286238757976 , -0.074494378103 , -0.00631379255851 , -0.475373583364 , -0.700187712854 , 0.494870182106 , -0.230221448306 , 0.22057534295 , 0.870733494121 , 0.613761523658 , -0.482016307715 , 0.17229366749 , 0.0259179321066 , -0.277444369232 , 0.510757283823 ,
-0.288545778745 , 0.0131873806344 , -0.522272685223 , -0.505544161128 , 0.523800254805 , -0.411463521499 , -0.059669664422 , -0.643443832806 , -0.152446299115 , 0.00766624082008 , -0.268709940636 , -0.954128467174 , -0.276780514316 , 0.0509040324251 , -0.762996321329 , 0.862741577816 , -0.854675254081 , -0.615515419732 , 0.629263656491 , 0.911783477061 ,
0.0715270472396 , 0.3511575258 , -0.984302445477 , 0.985977099841 , -0.71738839918 , -0.253605117892 , -0.381534152759 , 0.700495030786 , 0.185656125159 , 0.597929370016 , -0.576702151123 , 0.132963275482 , -0.306301086273 , 0.844235551677 , 0.520790182384 , -0.646805477368 , -0.427229182025 , -0.838916571244 , 0.271541869056 , -0.791346950838 ,
0.858242955413 , -0.353213707917 , -0.865187540625 , -0.340533232017 , -0.0904295015302 , -0.286663508995 , -0.107384290548 , 0.604810662967 , -0.0424139779462 , 0.29174032933 , -0.79251339893 , 0.360074587534 , 0.808103323364 , 0.499473006698 , 0.561940201829 , -0.254569666052 , 0.350784872752 , 0.976255994494 , -0.572986419331 , 0.0271962052372 ,
0.0197540495783 , 0.239874154265 , -0.565546008601 , -0.0440752499107 , -0.135061770154 , 0.132870347275 , -0.557554493014 , -0.683414963906 , 0.338430338029 , -0.0483610233663 , 0.38430940482 ,
} {

    Random rng(seed);
    Shuffle(rng, m_perm, m_perm+512);
}

float ValueNoise::Sample(const Vector2f& p)const {

    const Vector2f P =
	Vector2f( (float)(Floor(p.x) % 512), (float)(Floor(p.y) % 512) );

    const Vector2f f = Fade(
	p.x - Floor(p.x),
	p.y - Floor(p.y));

    const int A = GetPerm((int)P.x) +(int) P.y;
    const int AA = GetPerm(A);
    const int AB = GetPerm(A + 1);
    const int B =  GetPerm((int)P.x + 1) + (int)P.y;
    const int BA = GetPerm(B);
    const int BB = GetPerm(B + 1);


/*
    return mix(
	mix(mix(rand(AA), rand(BA), f.x),
	     mix(rand(AB), rand(BB), f.x), f.y),
	mix(mix(rand(AA + one),rand(BA + one), f.x),
	     mix(rand(AB + one),rand(BB + one), f.x), f.y),
	f.z);
*/

    return
	Lerp(Lerp(GetRand(AA), GetRand(BA), f.x), Lerp(GetRand(AB), GetRand(BB), f.x), f.y);
}

int ValueNoise::GetPerm(int i)const {
    return m_perm[i % 512];
}

float ValueNoise::GetRand(int i)const {
    return m_rand[i % 512];
}


float ValueNoise::Turbulence(const int octaves, const Vector2f& P, const float lacunarity, const float gain)const {

    float sum = 0;
    float scale = 1;
    float totalgain = 1;
    float max = 0;
    for(int i=0;i<octaves;i++){
	sum += totalgain*Sample(P*scale);
	max += totalgain;

	scale *= lacunarity;
	totalgain *= gain;
    }
    return fabs(sum / max);

}
